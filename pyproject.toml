[tool.poetry]
name = "data-hands-extract"
version = "0.8.0"
description = "Advanced document processing platform with enhanced content extraction and analysis capabilities"
authors = ["OpenHands <openhands@all-hands.dev>"]
readme = "README.md"
packages = [{include = "document_processor"}]

[tool.poetry.dependencies]
python = "^3.12"
# Core Processing
langchain-core = ">=0.1.0"
langchain-community = ">=0.0.16"
langchain-text-splitters = ">=0.0.1"
pydantic = ">=2.5.2"
rich = ">=13.7.0"

# Document Processing
python-docx = ">=1.0.0"
pypdf = ">=3.17.1"
python-pptx = ">=0.6.21"
openpyxl = ">=3.1.2"
markdown = ">=3.7.0"
PyMuPDF = ">=1.23.26"

# Enhanced Processing
unstructured = ">=0.10.30"
pdf2image = ">=1.16.3"
pytesseract = ">=0.3.10"
tabula-py = ">=2.9.0"

# ML and Analysis
numpy = "1.26.4"  # Fixed version for compatibility
torch = "2.5.1"   # Fixed version for compatibility
transformers = "4.45.2"  # Fixed version for compatibility
spacy = "3.8.2"   # Fixed version for compatibility
sentence-transformers = ">=2.2.2"

# Resource Management
psutil = ">=5.9.0"
py-cpuinfo = ">=9.0.0"
memory-profiler = ">=0.61.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "8.3.3"
pytest-cov = "6.0.0"
pytest-asyncio = "0.24.0"
pytest-xdist = "3.5.0"
pytest-timeout = "2.2.0"

# Code Quality
black = "24.2.0"
isort = "5.13.2"
mypy = "1.8.0"
ruff = "0.3.0"
pylint = "3.0.3"

# Security
bandit = "1.7.7"
safety = "2.3.5"

[tool.poetry.group.docs.dependencies]
sphinx = "7.2.6"
sphinx-rtd-theme = "2.0.0"
sphinx-autodoc-typehints = "2.0.0"
sphinx-copybutton = "0.5.2"
myst-parser = "2.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "8.3"
addopts = """
    --verbose
    --strict-markers
    --cov=document_processor
    --cov-report=term-missing
    --cov-report=xml
    --cov-report=html
    --no-cov-on-fail
    --cov-fail-under=80
"""
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.black]
line-length = 100
target-version = ["py312"]
include = '\.pyi?$'
extend-exclude = '''
^/tests/fixtures/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip = ["tests/fixtures"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.coverage.run]
source = ["document_processor"]
omit = ["tests/*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError"
]

[tool.ruff]
line-length = 100
target-version = "py312"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"tests/*" = ["E501"]